package teamtracker



import org.junit.*
import grails.test.mixin.*


// These are pretty much the autogenerated tests from the generate all command. 
//  I had to add some valid and invalid params to make some of the tests pass.

@TestFor(GameController)
@Mock([Game, Player])

class GameControllerTests {


	def populateValidParams(params) {
		assert params != null
		//  Populate valid properties
		params["date"] = new Date();
	}

	void testIndex() {
		controller.index()
		assert "/game/list" == response.redirectedUrl
	}

	void testList() {

		def model = controller.list()

		assert model.gameInstanceList.size() == 0
		assert model.gameInstanceTotal == 0
	}

	void testCreate() {
		def model = controller.create()

		assert model.gameInstance != null
	}

	void testSave() {
		controller.save()

		assert model.gameInstance != null
		assert view == '/game/create'

		response.reset()

		populateValidParams(params)
		controller.save()

		assert response.redirectedUrl == '/game/show/1'
		assert controller.flash.message != null
		assert Game.count() == 1
	}

	void testShow() {
		controller.show()

		assert flash.message != null
		assert response.redirectedUrl == '/game/list'


		populateValidParams(params)
		def game = new Game(params)

		assert game.save() != null

		params.id = game.id

		def model = controller.show()

		assert model.gameInstance == game
	}

	void testEdit() {
		controller.edit()

		assert flash.message != null
		assert response.redirectedUrl == '/game/list'


		populateValidParams(params)
		def game = new Game(params)

		assert game.save() != null

		params.id = game.id

		def model = controller.edit()

		assert model.gameInstance == game
	}

	void testUpdate() {
		controller.update()

		assert flash.message != null
		assert response.redirectedUrl == '/game/list'

		response.reset()


		populateValidParams(params)
		def game = new Game(params)

		assert game.save() != null

		// test invalid parameters in update
		params.id = game.id
		params.result= "not a valid choice"

		controller.update()

		assert view == "/game/edit"
		assert model.gameInstance != null

		game.clearErrors()


		// now try a good result param and update
		params.result= "win"
		populateValidParams(params)
		controller.update()


		assert response.redirectedUrl == "/game/show/$game.id"
		assert flash.message != null

		//test outdated version number
		response.reset()
		game.clearErrors()

		populateValidParams(params)
		params.id = game.id
		params.version = -1
		controller.update()

		assert view == "/game/edit"
		assert model.gameInstance != null
		assert model.gameInstance.errors.getFieldError('version')
		assert flash.message != null
	}

	void testDelete() {
		controller.delete()
		assert flash.message != null
		assert response.redirectedUrl == '/game/list'

		response.reset()

		populateValidParams(params)
		def game = new Game(params)

		assert game.save() != null
		assert Game.count() == 1

		params.id = game.id

		controller.delete()

		assert Game.count() == 0
		assert Game.get(game.id) == null
		assert response.redirectedUrl == '/game/list'
	}
}
